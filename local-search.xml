<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SQL之窗口函数</title>
    <link href="/2025/01/09/SQL%E4%B9%8B%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/"/>
    <url>/2025/01/09/SQL%E4%B9%8B%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h2><blockquote><p>先说定义：「<strong>看完定义你可能觉得一头雾水，哈哈别急，等我后续一步步拆解</strong>」窗口函数是 SQL 中一种用于在查询结果集的特定 “窗口”（子集）上进行计算的函数。它能够在不改变原始数据行的基础上，为每行数据计算出一个聚合值或排名值等相关结果。与普通聚合函数（如 SUM、AVG 等）不同，聚合函数会将多行数据聚合成一行输出，而窗口函数可以在每一行数据上都返回一个计算结果。</p></blockquote><p><img src="/img/post/SQL%E4%B9%8B%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0.assets/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E4%B8%8E%E8%81%9A%E5%90%88%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="窗口函数与聚合函数的区别" title="窗口函数与聚合函数的区别"></p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">function</span>(args) <span class="hljs-keyword">OVER</span>([<span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> expression] [<span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> expression[<span class="hljs-keyword">ASC</span><span class="hljs-operator">|</span><span class="hljs-keyword">DESC</span>]][frame])<br></code></pre></td></tr></table></figure><p>表达式拆解：</p><p>首先，OVER，PARTITION BY，ORDER BY 都是关键字，记住就好啦，之后越用越习惯，我们主要来拆解一下他们的作用</p><h4 id="1）function-args"><a href="#1）function-args" class="headerlink" title="1）function(args)"></a>1）<code>function(args)</code></h4><p>这个函数的作用就是在指定窗口中对数据进行计算或处理，以得出所需的结果。「至于这里说的窗口是什么，请往下看」</p><p><code>function(args)</code>可以是聚合函数，也可以是排名函数，具体使用什么函数就和不同的业务相关了，我在这里列出几个常用的函数：</p><p><strong>聚合函数</strong>：</p><ul><li><strong>SUM(args)</strong>：计算分区内指定列的总和。「这里的分区和窗口是一个概念，以下同理」</li><li><strong>AVG(args)</strong>：计算分区内指定列的平均值。</li><li><strong>MIN(args)</strong>：找出分区内指定列的最小值。</li><li><strong>MAX(args)</strong>：找出分区内指定列的最大值。</li></ul><p><strong>排名函数</strong>：</p><ul><li><strong>RANK()</strong>：为分区内的行分配排名，相同的值会获得相同的排名，并且会跳过相同排名的数量。</li><li><strong>DENSE_RANK()</strong>：为分区内的行分配排名，相同的值会获得相同的排名，但不会跳过相同排名的数量。</li><li><strong>ROW_NUMBER()</strong>：为分区内的行分配一个唯一的连续整数，从 1 开始，无论行内的值是否相同。（关于这三个排名函数的区别，下面会详细介绍➕做题练习）</li></ul><h4 id="2）-PARTITION-BY-expression"><a href="#2）-PARTITION-BY-expression" class="headerlink" title="2）[PARTITION BY expression]"></a>2）<code>[PARTITION BY expression]</code></h4><p><code>[PARTITION BY expression]</code>其中，PARTITION BY 是关键字，记住即可，而后面的 expression，就是我们要指定一个分组，这个字段通俗理解就是，我们要按照什么进行分组，当然他是<strong>可选的</strong></p><h4 id="3）-ORDER-BY-expression-ASC-DESC"><a href="#3）-ORDER-BY-expression-ASC-DESC" class="headerlink" title="3）[ORDER BY expression[ASC|DESC]]"></a>3）<code>[ORDER BY expression[ASC|DESC]]</code></h4><p>ORDER BY 就好理解了，就是要指定我们要按照什么进行排序，默认是升序，如果要降序排序，需要我们进行显示的指定</p><h4 id="4）-frame"><a href="#4）-frame" class="headerlink" title="4）[frame]"></a>4）<code>[frame]</code></h4><p>最后一部分就是这个<code>[frame]</code>了，他其实是指定一个窗口大小，也是可选的，其中他又分为两种模式，分别是<code>ROWS BETWEEN</code>和<code>RANGE BETWEEN</code>，下面我们来简单说一下这两种模式的区别：</p><p><code>ROWS BETWEEN</code>：按物理行来进行划分窗口，明确指定了窗口包含的行数，从当前行开始，向前或向后延伸一定的行数。</p><ul><li><code>ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>：窗口从分区的第一行开始，到当前行结束。</li><li><code>ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING</code>：窗口包含当前行的<strong>前一行、当前行和后一行</strong>，总共三行。</li></ul><p><code>RANGE BETWEEN</code>：按一定的数值逻辑来划分窗口范围，该范围是根据 <code>ORDER BY</code> 子句中列的值的范围来确定的，而不是物理行。通常与 <code>ORDER BY</code> 子句中的排序字段的逻辑值范围相关。</p><ul><li><code>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>：窗口包含从分区的第一行开始，到当前行**（基于** <code>ORDER BY</code> **列的值）**的所有行。</li><li><code>RANGE BETWEEN 5 PRECEDING AND 5 FOLLOWING</code>：窗口包含 <code>ORDER BY</code> 列的值<strong>在当前行的值的前 5 个值到后 5 个值之间的所有行</strong>，而不是具体的物理行。</li></ul><p><strong>关键区别总结</strong>：</p><ul><li><code>ROWS BETWEEN</code> 基于<strong>物理行</strong>，根据实际的行位置来确定窗口范围，对于需要精确控制前后行数量的计算（如移动平均、相邻行对比等）很有用。</li><li><code>RANGE BETWEEN</code> 基于<strong>逻辑范围</strong>，根据 <code>ORDER BY</code> 列的<strong>值</strong>的范围来确定窗口范围，更适合处理需要根据排序字段的值的范围进行计算的情况，例如基于数据值范围的聚合计算，对数据的逻辑分组和分析更有帮助。</li></ul><p>大家注意体会上述的<strong>物理行</strong>与<strong>逻辑值</strong>的关系~~~</p><p>针对<code>[frame]</code>，我再列出一些他的常用表达式和对应的含义，大家可以对照着看看，一定可以理解~</p><p><code>ROWS BETWEEN</code> <strong>常用表达式</strong>：</p><ul><li><code>ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>：分区范围为从起始行到当前行</li><li><code>ROWS BETWEEN CURRENT ROW AND UNBOUNDED FOLLOWING</code>：分区范围为从当前行到最后一行</li><li><code>ROWS BETWEEN n PRECEDING AND m FOLLOWING</code>：从当前行的前 <code>n</code> 行开始，到当前行的后 <code>m</code> 行结束</li></ul><p><code>RANGE BETWEEN</code> <strong>常用表达式</strong>：</p><ul><li><code>RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW</code>：此窗口范围从该分区中<strong>排序字段</strong>最小的行开始，到当前行结束。</li></ul><p><code>RANGE BETWEEN</code> <strong>的表达式不好理解，我们举一个具体的例子来看：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    product_id, <br>    sales_date, <br>    sales_amount, <br>    <span class="hljs-built_in">SUM</span>(sales_amount) <span class="hljs-keyword">OVER</span> (<br>        <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> product_id <br>        <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date <br>        <span class="hljs-keyword">RANGE</span> <span class="hljs-keyword">BETWEEN</span> UNBOUNDED PRECEDING <span class="hljs-keyword">AND</span> <span class="hljs-keyword">CURRENT</span> <span class="hljs-type">ROW</span><br>    ) <span class="hljs-keyword">AS</span> cumulative_sales_amount<br><span class="hljs-keyword">FROM</span> <br>    sales;<br></code></pre></td></tr></table></figure><p><strong>解释</strong>：对于每个 <code>product_id</code> 分区，按 <code>sales_date</code> 排序。此窗口范围从该分区中 <code>sales_date</code> 最小的行开始，到当前行（根据 <code>sales_date</code> 的值）结束。<code>cumulative_sales_amount</code> 计算的是从该分区中 <code>sales_date</code> 最小的行到当前行的 <code>sales_amount</code> 的累计和。<strong>它会考虑</strong> <code>sales_date</code> <strong>值小于或等于当前行</strong> <code>sales_date</code> <strong>的所有行，而不是具体的行数。</strong></p><ul><li><code>RANGE BETWEEN n PRECEDING AND m FOLLOWING</code>：此窗口范围包括 <code>sales_date</code> 值在当前行 <code>sales_date</code> 减去 <code>n</code>（这里 <code>n = 10</code>）到当前行 <code>sales_date</code> 加上 <code>m</code>（这里 <code>m = 10</code>）范围内的所有行。</li></ul><p>举例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    product_id, <br>    sales_date, <br>    sales_amount, <br>    <span class="hljs-built_in">AVG</span>(sales_amount) <span class="hljs-keyword">OVER</span> (<br>        <span class="hljs-keyword">PARTITION</span> <span class="hljs-keyword">BY</span> product_id <br>        <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> sales_date <br>        <span class="hljs-keyword">RANGE</span> <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">10</span> PRECEDING <span class="hljs-keyword">AND</span> <span class="hljs-number">10</span> FOLLOWING<br>    ) <span class="hljs-keyword">AS</span> range_average<br></code></pre></td></tr></table></figure><p><strong>解释</strong>：对于每个 <code>product_id</code> 分区，按 <code>sales_date</code> 排序。此窗口范围包括 <code>sales_date</code> 值在当前行 <code>sales_date</code> 减去 <code>n</code>（这里 <code>n = 10</code>）到当前行 <code>sales_date</code> 加上 <code>m</code>（这里 <code>m = 10</code>）范围内的所有行。<code>range_average</code> 计算的是这些行的 <code>sales_amount</code> 的平均值。请注意，这里的范围是基于 <code>sales_date</code> 的值，而不是物理行，因此如果有多个行的 <code>sales_date</code> 在这个范围内，它们都会被考虑进去。</p><h3 id="排序函数的区别"><a href="#排序函数的区别" class="headerlink" title="排序函数的区别"></a>排序函数的区别</h3><p><img src="/img/post/SQL%E4%B9%8B%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0.assets/1736386648048-781ff4fd-4d1a-44a8-a8ea-95cd9bca241a.jpeg" alt="三大排序函数的区别" title="三大排序函数的区别"></p><p><strong>函数记忆关键点：</strong></p><ul><li><code>row_number()</code>：序号不重复且连续</li><li><code>rank()</code>：序号可以重复，但序号不连续（比如：两个同学成绩都是 100 并列第一，第三个同学排名就是第三）</li><li><code>dense_rank()</code>：序号可以重复，序号连续</li></ul><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>LeetCode <a href="https://leetcode.cn/problems/rank-scores/">178. 分数排名</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>  Scores.score,<br>  <span class="hljs-comment">-- 使用 DENSE_RANK() 窗口函数对成绩进行排名</span><br>  <span class="hljs-comment">-- 该函数会为结果集中的每一行分配一个排名，根据分数降序排列</span><br>  <span class="hljs-comment">-- 相同分数的行将获得相同的排名，并且排名不会跳过，即下一个不同分数的排名会紧挨着上一个不同分数的排名</span><br>  <span class="hljs-built_in">dense_rank</span>() <span class="hljs-keyword">over</span> (<br>    <span class="hljs-comment">-- 按照分数降序排列</span><br>    <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>      score <span class="hljs-keyword">DESC</span><br>  ) <span class="hljs-keyword">AS</span> `rank`<br><span class="hljs-keyword">FROM</span><br>  Scores;<br></code></pre></td></tr></table></figure><p>LeetCode <a href="https://leetcode.cn/problems/department-highest-salary/">184. 部门工资最高的员工</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  Department,<br>  Employee,<br>  Salary<br><span class="hljs-keyword">from</span><br>  (<br>    <span class="hljs-keyword">select</span><br>      d.name <span class="hljs-keyword">as</span> Department,<br>      e.name <span class="hljs-keyword">as</span> Employee,<br>      e.salary <span class="hljs-keyword">as</span> Salary,<br>      <span class="hljs-comment">-- 窗口函数，根据部门ID分组后再根据员工薪水降序排序的顺序进行排名</span><br>      <span class="hljs-built_in">rank</span>() <span class="hljs-keyword">over</span> (<br>        <span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span><br>          e.departmentId<br>        <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>          e.salary <span class="hljs-keyword">desc</span><br>      ) <span class="hljs-keyword">as</span> salary_rank<br>    <span class="hljs-keyword">from</span><br>      Employee <span class="hljs-keyword">as</span> e<br>      <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> Department <span class="hljs-keyword">as</span> d <span class="hljs-keyword">on</span> e.departmentId <span class="hljs-operator">=</span> d.id<br>  ) <span class="hljs-keyword">as</span> t<br><span class="hljs-keyword">where</span><br>  <span class="hljs-comment">-- 取排名为1的员工就是部门最高薪水的员工</span><br>  salary_rank <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>看到这里，再来回看一下窗口函数的定义：</p><p>窗口函数是 SQL 中一种用于在查询结果集的特定 “窗口”（子集）上进行计算的函数。它能够在不改变原始数据行的基础上，为每行数据计算出一个聚合值或排名值等相关结果。与普通聚合函数（如 SUM、AVG 等）不同，聚合函数会将多行数据聚合成一行输出，而窗口函数可以在每一行数据上都返回一个计算结果。</p><p>已经很清晰啦~~</p>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>SQL</tag>
      
      <tag>窗口函数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>排序算法</title>
    <link href="/2025/01/08/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <url>/2025/01/08/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<blockquote><p>偷个懒先传个PDF上来 ~~ 有需要可以下载下来看</p></blockquote><div class="row">    <embed src="/pdf/排序算法.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    
    <categories>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>排序</tag>
      
      <tag>算法</tag>
      
      <tag>十大排序</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HelloWorld ~</title>
    <link href="/2025/01/07/hello-world/"/>
    <url>/2025/01/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>都和你说了什么都没有，真的什么都没有</p>]]></content>
    
    
    <categories>
      
      <category>博文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>我的第一篇博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
